//PONER EL TAMAÑO DE FUENTE DE LA CONSOLA EN FUENTES DE MAPAS DE BITS 8X8
//PONER EL TAMAÑO DE FUENTE DE LA CONSOLA EN FUENTES DE MAPAS DE BITS 8X8
//PONER EL TAMAÑO DE FUENTE DE LA CONSOLA EN FUENTES DE MAPAS DE BITS 8X8
//PONER EL TAMAÑO DE FUENTE DE LA CONSOLA EN FUENTES DE MAPAS DE BITS 8X8
//PONER EL TAMAÑO DE FUENTE DE LA CONSOLA EN FUENTES DE MAPAS DE BITS 8X8
//PONER EL TAMAÑO DE FUENTE DE LA CONSOLA EN FUENTES DE MAPAS DE BITS 8X8
//PONER EL TAMAÑO DE FUENTE DE LA CONSOLA EN FUENTES DE MAPAS DE BITS 8X8
//PONER EL TAMAÑO DE FUENTE DE LA CONSOLA EN FUENTES DE MAPAS DE BITS 8X8
//PONER EL TAMAÑO DE FUENTE DE LA CONSOLA EN FUENTES DE MAPAS DE BITS 8X8
//PONER EL TAMAÑO DE FUENTE DE LA CONSOLA EN FUENTES DE MAPAS DE BITS 8X8
//PONER EL TAMAÑO DE FUENTE DE LA CONSOLA EN FUENTES DE MAPAS DE BITS 8X8
//PONER EL TAMAÑO DE FUENTE DE LA CONSOLA EN FUENTES DE MAPAS DE BITS 8X8
//PONER EL TAMAÑO DE FUENTE DE LA CONSOLA EN FUENTES DE MAPAS DE BITS 8X8
//PONER EL TAMAÑO DE FUENTE DE LA CONSOLA EN FUENTES DE MAPAS DE BITS 8X8
#include <iostream>
#include"JUEGO.h"
#include<conio.h>
#include"creditos.h"
#include"controles.h"
using namespace std;
using namespace System;
int posx = 50, posy = 2, direccion = 1;//41 derecha
int pantalla[25][80] = {
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,6,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,6,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,6,6,6,5,5,5,5,5,6,5,5,5,5,6,6,5,6,5,6,6,6,6,5,5,5,6,6,5,5,5,6,6,6,6,5,5,5,6,6,5,5,5,6,6,6,5,5,6,6,5,5,5,6,6,6,5,5,6,6,6,6,6,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,6,6,6,6,6,5,6,6,6,5,6,6,5,6,5,6,5,6,5,6,6,6,5,6,6,5,6,5,6,6,6,6,6,6,5,6,6,5,6,5,6,6,6,6,5,6,6,6,6,5,6,6,6,6,5,6,6,5,6,6,6,6,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,6,6,6,6,6,5,6,6,6,5,6,6,5,6,5,6,6,6,5,6,6,6,5,6,6,5,6,5,5,5,6,6,6,6,5,5,5,6,6,5,5,6,6,6,6,5,5,6,6,5,6,6,6,6,5,5,5,5,6,6,6,6,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,6,6,6,6,6,5,6,6,6,5,6,6,5,6,5,6,6,6,5,6,6,6,5,6,6,5,6,5,6,6,6,6,6,6,5,6,6,6,6,5,6,6,6,6,6,6,6,5,6,5,6,6,6,6,5,6,6,5,6,6,6,6,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,6,6,6,6,6,5,6,6,6,5,5,5,5,6,5,6,6,6,5,6,6,6,5,5,5,6,6,5,5,5,6,6,6,6,5,6,6,6,6,5,5,5,6,6,6,5,5,6,6,5,5,5,6,6,5,6,6,5,6,6,6,6,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,6,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,6,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,4,9,9,9,9,4,4,4,9,4,9,9,9,4,4,4,9,4,9,4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,9,9,9,9,4,9,4,9,4,9,9,9,4,9,4,9,4,4,4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,9,9,9,9,4,4,4,9,4,9,9,9,4,4,4,9,9,4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,9,9,9,9,4,9,9,9,4,9,9,9,4,9,4,9,9,4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,4,4,9,4,9,4,9,9,9,4,4,4,9,4,9,4,9,9,4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,4,4,9,9,9,4,4,4,9,4,4,4,9,4,4,4,9,4,4,4,9,4,4,4,9,4,9,9,4,4,4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,9,9,9,4,9,9,9,4,9,4,9,4,9,4,9,9,4,9,9,4,9,4,9,4,9,9,4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,4,4,9,9,9,4,9,9,9,4,9,4,9,4,9,4,9,9,4,9,9,4,9,4,9,4,9,9,4,4,4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 } };
int pantalla2[25][80] = {
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,9,9,9,9,9,4,9,9,9,4,9,4,9,4,9,4,9,9,4,9,9,4,9,4,9,4,9,9,4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,4,4,9,4,9,4,4,4,9,4,4,4,9,4,9,4,9,9,4,9,9,4,4,4,9,4,4,9,4,4,4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,4,4,9,9,9,4,4,4,9,4,4,4,9,4,4,4,9,4,4,9,9,4,9,4,4,4,9,4,4,4,9,4,4,4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,9,9,9,4,9,9,9,4,9,4,9,4,9,9,9,4,9,4,9,4,9,9,4,9,9,4,9,4,9,4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,4,4,9,9,9,4,9,9,9,4,4,4,9,4,4,4,9,4,9,4,9,4,9,9,4,9,9,4,9,4,9,4,4,4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,9,9,9,4,9,9,9,4,4,9,9,4,9,9,9,4,9,4,9,4,9,9,4,9,9,4,9,4,9,9,9,4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,4,4,9,4,9,4,4,4,9,4,9,4,9,4,4,4,9,4,4,9,9,4,9,9,4,9,9,4,4,4,9,4,4,4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,9,4,9,9,9,4,4,4,9,4,4,4,9,4,9,9,4,9,4,4,4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,9,4,9,9,9,4,9,9,9,4,9,4,9,4,9,9,4,9,4,9,4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,4,4,4,9,9,4,4,4,9,4,4,4,9,4,9,9,4,9,4,4,4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,9,9,9,9,9,4,9,4,9,4,9,4,9,9,4,9,4,4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,9,4,9,4,4,4,9,4,9,4,9,4,4,9,4,9,4,9,4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 } };
int pantalla3[25][80] = {
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,2,2,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,3,9,9,9,9,9,9,9,3,9,9,9,9,9 },
	{ 9,9,9,9,9,9,9,9,9,9,3,9,9,9,9,9,9,9,9,9,9,9,9,2,2,2,2,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,3,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,3,9,9,9,9,9,9,3,9,9,9,9,9 },
	{ 9,3,9,9,9,3,9,9,9,3,9,9,9,9,9,9,9,9,9,9,9,9,9,2,4,4,2,9,2,2,2,2,9,9,9,9,9,9,9,9,9,9,9,3,9,9,9,3,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,3,9,9,9,9,9,3,9,9,9,9,9,9 },
	{ 9,3,9,9,9,3,9,9,9,3,9,9,9,9,9,9,9,9,9,9,2,2,9,2,2,2,2,9,2,4,4,2,9,9,9,9,9,9,9,3,9,9,9,3,9,9,9,3,5,5,5,5,5,5,5,5,9,9,9,9,9,9,9,3,9,9,9,9,3,9,9,9,9,3,9,5,5,5,5,5 },
	{ 9,9,3,9,3,9,9,9,9,3,9,9,9,9,9,9,9,9,9,2,4,2,9,2,2,2,2,9,2,2,2,2,9,9,9,9,9,9,9,3,9,9,9,3,9,9,9,3,5,5,5,5,5,5,5,5,5,5,5,9,9,9,9,3,9,9,9,9,3,9,9,9,3,9,5,5,5,5,5,5 },
	{ 9,9,3,9,3,9,5,5,5,3,5,5,9,9,9,9,9,9,9,2,2,2,9,2,2,2,2,9,2,2,2,2,9,9,9,9,9,9,9,3,9,9,9,3,9,5,3,5,5,5,5,5,5,5,5,5,6,5,5,5,5,5,5,3,3,3,9,9,9,3,9,9,3,5,5,5,5,5,5,5 },
	{ 9,9,3,5,3,5,5,5,3,5,5,5,5,5,5,5,9,9,9,2,2,2,9,2,2,2,2,2,2,2,2,9,9,9,9,9,9,9,9,9,3,9,9,3,5,5,3,5,5,5,5,5,5,5,5,6,6,6,5,5,5,5,5,5,5,5,3,3,5,3,5,3,5,5,5,5,5,5,5,5 },
	{ 9,9,3,5,3,5,5,5,3,5,5,5,5,5,5,5,5,5,5,9,2,2,2,2,2,2,2,2,2,2,5,5,9,9,9,9,9,9,9,9,5,3,5,3,5,3,5,5,5,5,5,5,5,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,3,3,3,3,5,5,5,5,5,5,5,5 },
	{ 5,5,5,3,5,3,5,3,5,5,5,5,5,5,5,5,5,5,5,5,2,2,2,2,2,2,2,2,2,5,5,5,5,5,5,5,5,5,5,5,5,5,3,3,3,5,5,5,5,5,5,5,5,5,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5 },
	{ 5,5,5,5,3,3,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,2,2,2,2,2,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,5,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5 },
	{ 5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,5,5,5,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5 },
	{ 5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5 },
	{ 5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5 } };
int ppppes[9][27] = {
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
void crearMatriz(int** matriz, int cf, int cc)
{
	for (int i = 0; i < cf; i++)
	{
		matriz[i] = new int[cc];
	}
}
void liberaMatriz(int** matriz, int cf, int cc)
{
	for (int i = 0; i < cf; i++)
	{
		delete[] matriz[i];
	}
	delete[] matriz;
}
void cargaMatriz(int** matriz, int cf, int cc)
{
	for (int i = 0; i < cf; i++)
	{
		for (int j = 0; j < cc; j++)
		{
			matriz[i][j] = pantalla[i][j];
		}
	}
}
void pintarMatriz(int** matriz, int cf, int cc) {
	cout << endl;
	for (int i = 0; i < cf; i++)
	{

		for (int j = 0; j < cc; j++)
		{
			gotoXY(i, j, matriz[i][j]);
			cout << m;
		}
	}cout << endl;
}

void cargaMatriz2(int** matriz, int cf, int cc)
{
	for (int i = 0; i < cf; i++)
	{
		for (int j = 0; j < cc; j++)
		{
			matriz[i][j] = pantalla2[i][j];
		}
	}
}
void pintarMatriz2(int** matriz, int cf, int cc) {
	cout << endl;
	for (int i = 0; i < cf; i++)
	{

		for (int j = 0; j < cc; j++)
		{
			gotoXY(i + 25, j, matriz[i][j]);
			cout << m;
		}
	}cout << endl;
}
void cargaMatriz3(int** matriz, int cf, int cc)
{
	for (int i = 0; i < cf; i++)
	{
		for (int j = 0; j < cc; j++)
		{
			matriz[i][j] = pantalla3[i][j];
		}
	}
}

void pintarMatriz3(int** matriz, int cf, int cc) {
	cout << endl;
	for (int i = 0; i < cf; i++)
	{

		for (int j = 0; j < cc; j++)
		{
			gotoXY(i + 50, j, matriz[i][j]);
			cout << m;
		}
	}cout << endl;
}
void ppppescadoA1(int x, int y)
{
	char c = 219;
	for (int i = 0; i < 8; i++)
	{
		posicion(x, y);
		for (int j = 0; j < 27; j++)
		{
			if (i == 2 && j >= 20 && j <= 24 || i == 2 && j >= 16 && j <= 17
				|| i == 3 && j >= 19 && j <= 25 || i == 3 && j >= 16 && j <= 17
				|| i == 4 && j >= 18 && j <= 26 && j != 24
				|| i == 5 && j >= 18 && j <= 26
				|| i == 6 && j >= 19 && j <= 25 || i == 6 && j >= 16 && j <= 17
				|| i == 7 && j >= 20 && j <= 24 || i == 7 && j >= 16 && j <= 17)
			{
				Console::ForegroundColor = ConsoleColor(1);

				cout << m;
			}
			else
			{
				Console::ForegroundColor = ConsoleColor(9);

				cout << m;
			}
		}cout << endl; x++;
	}

}
void ppppescadoA2(int x, int y)
{
	for (int i = 0; i < 9; i++)
	{
		posicion(x, y);
		for (int j = 0; j < 27; j++)
		{
			if (i == 1 && j == 16
				|| i == 2 && j >= 20 && j <= 24 || i == 2 && j >= 16 && j <= 17
				|| i == 3 && j >= 19 && j <= 25 || i == 3 && j == 17
				|| i == 4 && j >= 18 && j <= 26 && j != 24
				|| i == 5 && j >= 18 && j <= 26
				|| i == 6 && j >= 19 && j <= 25 || i == 6 && j == 17
				|| i == 7 && j >= 20 && j <= 24 || i == 7 && j >= 16 && j <= 17
				|| i == 8 && j == 16)
			{
				Console::ForegroundColor = ConsoleColor(1);

				cout << m;
			}
			else
			{
				Console::ForegroundColor = ConsoleColor(9);

				cout << m;
			}
		}cout << endl; x++;
	}
}
void borrarppppescado(int x, int y)
{
	for (int i = 0; i < 9; i++)
	{
		posicion(x, y);
		for (int j = 0; j < 29; j++)
		{
			Console::ForegroundColor = ConsoleColor(9);

			cout << m;
		}cout << endl; x++;
	}
}
void ppppescadoD1(int x, int y)
{
	for (int i = 0; i < 8; i++)
	{
		posicion(x, y);
		for (int j = 0; j < 29; j++)
		{
			if (i == 2 && j >= 20 && j <= 24 || i == 2 && j >= 27 && j <= 28
				|| i == 3 && j >= 19 && j <= 25 || i == 3 && j >= 27 && j <= 28
				|| i == 4 && j >= 18 && j <= 26 && j != 20
				|| i == 5 && j >= 18 && j <= 26
				|| i == 6 && j >= 19 && j <= 25 || i == 6 && j >= 27 && j <= 28
				|| i == 7 && j >= 20 && j <= 24 || i == 7 && j >= 27 && j <= 28)
			{
				Console::ForegroundColor = ConsoleColor(1);

				cout << m;
			}
			else
			{
				Console::ForegroundColor = ConsoleColor(9);

				cout << m;
			}
		}cout << endl; x++;
	}

}
void ppppescadoD2(int x, int y)
{
	for (int i = 0; i < 9; i++)
	{
		posicion(x, y);
		for (int j = 0; j < 29; j++)
		{
			if (i == 1 && j == 28
				|| i == 2 && j >= 20 && j <= 24 || i == 2 && j >= 27 && j <= 28
				|| i == 3 && j >= 19 && j <= 25 || i == 3 && j == 27
				|| i == 4 && j >= 18 && j <= 26 && j != 20
				|| i == 5 && j >= 18 && j <= 26
				|| i == 6 && j >= 19 && j <= 25 || i == 6 && j == 27
				|| i == 7 && j >= 20 && j <= 24 || i == 7 && j >= 27 && j <= 28
				|| i == 8 && j == 28)
			{
				Console::ForegroundColor = ConsoleColor(1);

				cout << m;
			}
			else
			{
				Console::ForegroundColor = ConsoleColor(9);

				cout << m;
			}
		}cout << endl; x++;
	}
}
void adelanteppppescado()
{
	ppppescadoA1(posx, posy);
	_sleep(150);
	borrarppppescado(posx, posy);
	ppppescadoA2(posx, posy);
	_sleep(150);
	borrarppppescado(posx, posy);
	posy++;
}
void atrasppppescado()
{
	ppppescadoD1(posx, posy);
	_sleep(150);
	borrarppppescado(posx, posy);
	ppppescadoD2(posx, posy);
	_sleep(150);
	borrarppppescado(posx, posy);
	posy--;
}
void main()
{
	Console::SetWindowSize(80, 74);
	char opcion;
	int f = 25, c = 80;
	int** p = new int*[f];
	int** p2 = new int*[f];
	int** p3 = new int*[f];

	crearMatriz(p, f, c);
	cargaMatriz(p, f, c);
	pintarMatriz(p, f, c);

	crearMatriz(p2, f, c);
	cargaMatriz2(p2, f, c);
	pintarMatriz2(p2, f, c);

	crearMatriz(p3, f, c);
	cargaMatriz3(p3, f, c);
	pintarMatriz3(p3, f, c);

	while (true)
	{
		if (posy == 2)
		{
			direccion = 41;
		}
		if (posy == 40)
		{
			direccion = 1;
		}
		if (direccion == 41)
		{
			adelanteppppescado();
		}
		if (direccion == 1)
		{
			atrasppppescado();
		}
		if (_kbhit())
		{
			opcion = _getch();
			if (opcion == '1') {
				system("CLS");
				jugar();
			}
			if (opcion == '2') {
				system("CLS");
				controles();

			}
			if (opcion == '3') {
				system("CLS");
				creditos();
			}

			if (opcion == '4')
			{
				break;
			}
			Console::SetWindowSize(80, 74);
			pintarMatriz(p, f, c);
			pintarMatriz2(p2, f, c);
			pintarMatriz3(p3, f, c);
		}
	}
	liberaMatriz(p, f, c);
	liberaMatriz(p2, f, c);
	liberaMatriz(p3, f, c);
}
//PONER EL TAMAÑO DE FUENTE DE LA CONSOLA EN FUENTES DE MAPAS DE BITS 8X8
//PONER EL TAMAÑO DE FUENTE DE LA CONSOLA EN FUENTES DE MAPAS DE BITS 8X8
//PONER EL TAMAÑO DE FUENTE DE LA CONSOLA EN FUENTES DE MAPAS DE BITS 8X8
//PONER EL TAMAÑO DE FUENTE DE LA CONSOLA EN FUENTES DE MAPAS DE BITS 8X8
//PONER EL TAMAÑO DE FUENTE DE LA CONSOLA EN FUENTES DE MAPAS DE BITS 8X8
//PONER EL TAMAÑO DE FUENTE DE LA CONSOLA EN FUENTES DE MAPAS DE BITS 8X8
//PONER EL TAMAÑO DE FUENTE DE LA CONSOLA EN FUENTES DE MAPAS DE BITS 8X8
//PONER EL TAMAÑO DE FUENTE DE LA CONSOLA EN FUENTES DE MAPAS DE BITS 8X8
//PONER EL TAMAÑO DE FUENTE DE LA CONSOLA EN FUENTES DE MAPAS DE BITS 8X8
//PONER EL TAMAÑO DE FUENTE DE LA CONSOLA EN FUENTES DE MAPAS DE BITS 8X8
//PONER EL TAMAÑO DE FUENTE DE LA CONSOLA EN FUENTES DE MAPAS DE BITS 8X8
//PONER EL TAMAÑO DE FUENTE DE LA CONSOLA EN FUENTES DE MAPAS DE BITS 8X8
//PONER EL TAMAÑO DE FUENTE DE LA CONSOLA EN FUENTES DE MAPAS DE BITS 8X8
//PONER EL TAMAÑO DE FUENTE DE LA CONSOLA EN FUENTES DE MAPAS DE BITS 8X8